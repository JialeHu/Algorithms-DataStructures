memberSearchIndex = [{"p":"my.data_structures","c":"MinStack","l":"add(E)"},{"p":"my.data_structures","c":"MedianMaintainer","l":"add(int)"},{"p":"my.data_structures","c":"MinStack","l":"add(int, E)","url":"add(int,E)"},{"p":"my.algorithms","c":"Arithmetic","l":"add(String, String)","url":"add(java.lang.String,java.lang.String)"},{"p":"my.data_structures","c":"MinStack","l":"addAll(Collection<? extends E>)","url":"addAll(java.util.Collection)"},{"p":"my.data_structures","c":"MinStack","l":"addAll(int, Collection<? extends E>)","url":"addAll(int,java.util.Collection)"},{"p":"my.data_structures","c":"MinStack","l":"addElement(E)"},{"p":"my.data_structures","c":"UnionFind","l":"addNode(E)"},{"p":"my.utility","c":"NumberReader","l":"adjacencyLists(String)","url":"adjacencyLists(java.lang.String)"},{"p":"my.algorithms","c":"Arithmetic","l":"Arithmetic()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"SCC","l":"array2map(int[], int[])","url":"array2map(int[],int[])"},{"p":"my.algorithms","c":"SCC2","l":"array2map(int[], int[])","url":"array2map(int[],int[])"},{"p":"my.algorithms","c":"ArraySort","l":"ArraySort()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"BinaryTree","l":"BinaryTree()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"BitManipulation","l":"BitManipulation()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"MedianMaintainer","l":"clear()"},{"p":"my.data_structures","c":"MinStack","l":"clear()"},{"p":"my.data_structures","c":"MinStack","l":"clone()"},{"p":"my.algorithms","c":"Clustering","l":"Clustering()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"MinStack","l":"comparator()"},{"p":"my.data_structures","c":"UnionFind.Edge","l":"compareTo(UnionFind.Edge<E>)","url":"compareTo(my.data_structures.UnionFind.Edge)"},{"p":"my.algorithms","c":"Scheduling","l":"completionTime(Scheduling.Job[])","url":"completionTime(my.algorithms.Scheduling.Job[])"},{"p":"my.data_structures","c":"Trie.TrieNode","l":"containsKey(char)"},{"p":"my.utility","c":"Counter","l":"count()"},{"p":"my.utility","c":"Counter","l":"Counter()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"BinaryTree","l":"deserialize(String)","url":"deserialize(java.lang.String)"},{"p":"my.algorithms","c":"TopologicalSort","l":"DFSsort(HashMap<Integer, List<Integer>>)","url":"DFSsort(java.util.HashMap)"},{"p":"my.algorithms","c":"ShortestPath","l":"dijkstra(Graph, int)","url":"dijkstra(my.data_structures.Graph,int)"},{"p":"my.data_structures","c":"Matrix","l":"dotProduct(int[], int[])","url":"dotProduct(int[],int[])"},{"p":"my.data_structures","c":"UnionFind.Edge","l":"Edge(E, E, int)","url":"%3Cinit%3E(E,E,int)"},{"p":"my.data_structures","c":"Graph.Edge","l":"Edge(int, int)","url":"%3Cinit%3E(int,int)"},{"p":"my.data_structures","c":"Graph.Edge","l":"Edge(int, int, int)","url":"%3Cinit%3E(int,int,int)"},{"p":"my.data_structures","c":"UnionFind","l":"find(E)"},{"p":"my.data_structures","c":"Trie.TrieNode","l":"get(char)"},{"p":"my.data_structures","c":"Pair","l":"get1()"},{"p":"my.data_structures","c":"Pair","l":"get2()"},{"p":"my.utility","c":"Counter","l":"getCount()"},{"p":"my.data_structures","c":"Graph.Edge","l":"getDist()"},{"p":"my.data_structures","c":"UnionFind.Edge","l":"getDistance()"},{"p":"my.data_structures","c":"Graph","l":"getEdges(int)"},{"p":"my.data_structures","c":"Graph.Edge","l":"getHead()"},{"p":"my.data_structures","c":"MedianMaintainer","l":"getMedian()"},{"p":"my.data_structures","c":"MedianMaintainer","l":"getMedian(int[])"},{"p":"my.data_structures","c":"MedianMaintainer","l":"getMiddle()"},{"p":"my.data_structures","c":"MedianMaintainer","l":"getMiddle(int[])"},{"p":"my.data_structures","c":"MinStack","l":"getMin()"},{"p":"my.data_structures","c":"UnionFind","l":"getNumEndNodes()"},{"p":"my.data_structures","c":"Graph","l":"getNumOfTails()"},{"p":"my.data_structures","c":"Graph","l":"getNumOfVertices()"},{"p":"my.data_structures","c":"RandomizedSet","l":"getRandom()"},{"p":"my.data_structures","c":"UnionFind.Edge","l":"getSource()"},{"p":"my.data_structures","c":"Graph.Edge","l":"getTail()"},{"p":"my.data_structures","c":"UnionFind.Edge","l":"getTarget()"},{"p":"my.data_structures","c":"Graph","l":"getVertices()"},{"p":"my.data_structures","c":"Graph","l":"Graph(ArrayList<Graph.Edge>)","url":"%3Cinit%3E(java.util.ArrayList)"},{"p":"my.data_structures","c":"Graph","l":"Graph(HashMap<Integer, ArrayList<Graph.Edge>>)","url":"%3Cinit%3E(java.util.HashMap)"},{"p":"my.data_structures","c":"Graph","l":"Graph(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"my.algorithms","c":"BitManipulation","l":"HammingDistance(int, int)","url":"HammingDistance(int,int)"},{"p":"my.algorithms","c":"TopologicalSort","l":"hasCycle(HashMap<Integer, List<Integer>>)","url":"hasCycle(java.util.HashMap)"},{"p":"my.algorithms","c":"ArraySort","l":"heapSort(int[])"},{"p":"my.algorithms","c":"HuffmanCoding","l":"HuffmanCoding()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"HuffmanCoding","l":"huffmanCoding(List<Integer>)","url":"huffmanCoding(java.util.List)"},{"p":"my.data_structures","c":"Min_Heap","l":"insert(int)"},{"p":"my.data_structures","c":"RandomizedSet","l":"insert(int)"},{"p":"my.data_structures","c":"Trie","l":"insert(String)","url":"insert(java.lang.String)"},{"p":"my.utility","c":"NumberReader","l":"int2array(String)","url":"int2array(java.lang.String)"},{"p":"my.utility","c":"NumberReader","l":"int2arrays(String)","url":"int2arrays(java.lang.String)"},{"p":"my.algorithms","c":"Inversion","l":"Inversion()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"Inversion","l":"inversions(int[])"},{"p":"my.data_structures","c":"MedianMaintainer","l":"isEmpty()"},{"p":"my.data_structures","c":"Min_Heap","l":"isEmpty()"},{"p":"my.data_structures","c":"Trie.TrieNode","l":"isEnd()"},{"p":"my.data_structures","c":"UnionFind.Node","l":"isEnd()"},{"p":"my.algorithms","c":"ArraySort","l":"isEqual(int[], int[])","url":"isEqual(int[],int[])"},{"p":"my.algorithms","c":"Arithmetic","l":"isEqual(String, String)","url":"isEqual(java.lang.String,java.lang.String)"},{"p":"my.algorithms","c":"ArraySort","l":"isSorted(int[])"},{"p":"my.algorithms","c":"Arithmetic","l":"karatsuba(String, String)","url":"karatsuba(java.lang.String,java.lang.String)"},{"p":"my.algorithms","c":"SCC","l":"kosaraju(int[], int[])","url":"kosaraju(int[],int[])"},{"p":"my.algorithms","c":"SCC2","l":"kosaraju(int[], int[])","url":"kosaraju(int[],int[])"},{"p":"my.data_structures","c":"BinaryTree.TreeNode","l":"left"},{"p":"my.utility","c":"NumberReader","l":"long2array(String)","url":"long2array(java.lang.String)"},{"p":"my.algorithms","c":"Arithmetic","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"ArraySort","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"BitManipulation","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"Clustering","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"HuffmanCoding","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"Inversion","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"MinCut","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"MinimumSpanningTree","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"SCC","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"SCC2","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"Scheduling","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"ShortestPath","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"TopologicalSort","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.algorithms","c":"TwoSum","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.data_structures","c":"Matrix","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.data_structures","c":"MedianMaintainer","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"my.data_structures","c":"Matrix","l":"matColToVec(int[][], int)","url":"matColToVec(int[][],int)"},{"p":"my.data_structures","c":"Matrix","l":"Matrix()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"Matrix","l":"matRowToVec(int[][], int)","url":"matRowToVec(int[][],int)"},{"p":"my.data_structures","c":"BinaryTree","l":"maxDepth(BinaryTree.TreeNode)","url":"maxDepth(my.data_structures.BinaryTree.TreeNode)"},{"p":"my.algorithms","c":"Clustering","l":"maxSpacingKclustering(List<UnionFind.Edge<Integer>>, List<Integer>, int)","url":"maxSpacingKclustering(java.util.List,java.util.List,int)"},{"p":"my.data_structures","c":"MedianMaintainer","l":"MedianMaintainer()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"ArraySort","l":"mergeSort(int[])"},{"p":"my.data_structures","c":"Min_Heap","l":"Min_Heap()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"MinCut","l":"MinCut()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"BinaryTree","l":"minDepth(BinaryTree.TreeNode)","url":"minDepth(my.data_structures.BinaryTree.TreeNode)"},{"p":"my.algorithms","c":"MinimumSpanningTree","l":"MinimumSpanningTree()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"MinStack","l":"MinStack()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"MinStack","l":"MinStack(Comparator<? super E>)","url":"%3Cinit%3E(java.util.Comparator)"},{"p":"my.data_structures","c":"Matrix","l":"multiply(int[][], int[][])","url":"multiply(int[][],int[][])"},{"p":"my.data_structures","c":"UnionFind.Node","l":"next"},{"p":"my.data_structures","c":"UnionFind.Node","l":"Node(E)","url":"%3Cinit%3E(E)"},{"p":"my.utility","c":"NumberReader","l":"NumberReader()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"Pair","l":"Pair(V1, V2)","url":"%3Cinit%3E(V1,V2)"},{"p":"my.data_structures","c":"MinStack","l":"peek()"},{"p":"my.data_structures","c":"Min_Heap","l":"peek()"},{"p":"my.data_structures","c":"Min_Heap","l":"poll()"},{"p":"my.data_structures","c":"MinStack","l":"pop()"},{"p":"my.algorithms","c":"MinimumSpanningTree","l":"prim(Graph)","url":"prim(my.data_structures.Graph)"},{"p":"my.data_structures","c":"Graph","l":"print()"},{"p":"my.data_structures","c":"BinaryTree","l":"print(BinaryTree.TreeNode)","url":"print(my.data_structures.BinaryTree.TreeNode)"},{"p":"my.algorithms","c":"TwoSum","l":"printList(long[], List<int[]>)","url":"printList(long[],java.util.List)"},{"p":"my.data_structures","c":"MinStack","l":"push(E)"},{"p":"my.data_structures","c":"Trie.TrieNode","l":"put(char, Trie.TrieNode)","url":"put(char,my.data_structures.Trie.TrieNode)"},{"p":"my.algorithms","c":"ArraySort","l":"quickSortI(int[])"},{"p":"my.algorithms","c":"ArraySort","l":"quickSortII()"},{"p":"my.algorithms","c":"MinCut","l":"randomContraction(HashMap<Integer, List<Integer>>)","url":"randomContraction(java.util.HashMap)"},{"p":"my.data_structures","c":"RandomizedSet","l":"RandomizedSet()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"MinStack","l":"remove(int)"},{"p":"my.data_structures","c":"RandomizedSet","l":"remove(int)"},{"p":"my.data_structures","c":"MinStack","l":"remove(Object)","url":"remove(java.lang.Object)"},{"p":"my.data_structures","c":"MinStack","l":"removeAll(Collection<?>)","url":"removeAll(java.util.Collection)"},{"p":"my.data_structures","c":"MinStack","l":"removeAllElements()"},{"p":"my.data_structures","c":"MinStack","l":"removeElement(Object)","url":"removeElement(java.lang.Object)"},{"p":"my.data_structures","c":"MinStack","l":"removeElementAt(int)"},{"p":"my.data_structures","c":"MinStack","l":"removeIf(Predicate<? super E>)","url":"removeIf(java.util.function.Predicate)"},{"p":"my.data_structures","c":"MedianMaintainer","l":"removeMiddle()"},{"p":"my.data_structures","c":"MinStack","l":"replaceAll(UnaryOperator<E>)","url":"replaceAll(java.util.function.UnaryOperator)"},{"p":"my.utility","c":"Counter","l":"reset()"},{"p":"my.data_structures","c":"MinStack","l":"retainAll(Collection<?>)","url":"retainAll(java.util.Collection)"},{"p":"my.data_structures","c":"BinaryTree.TreeNode","l":"right"},{"p":"my.algorithms","c":"SCC","l":"SCC()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"SCC2","l":"SCC2()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"Scheduling","l":"Scheduling()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"Trie","l":"search(String)","url":"search(java.lang.String)"},{"p":"my.data_structures","c":"BinaryTree","l":"serialize(BinaryTree.TreeNode)","url":"serialize(my.data_structures.BinaryTree.TreeNode)"},{"p":"my.data_structures","c":"MinStack","l":"set(int, E)","url":"set(int,E)"},{"p":"my.data_structures","c":"MinStack","l":"setElementAt(E, int)","url":"setElementAt(E,int)"},{"p":"my.data_structures","c":"Trie.TrieNode","l":"setEnd()"},{"p":"my.data_structures","c":"Graph.Edge","l":"setTail(int)"},{"p":"my.data_structures","c":"Matrix","l":"setValue(int[][], int)","url":"setValue(int[][],int)"},{"p":"my.algorithms","c":"ShortestPath","l":"ShortestPath()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"MedianMaintainer","l":"size()"},{"p":"my.data_structures","c":"UnionFind","l":"size()"},{"p":"my.data_structures","c":"BinaryTree","l":"sizeOf(BinaryTree.TreeNode)","url":"sizeOf(my.data_structures.BinaryTree.TreeNode)"},{"p":"my.algorithms","c":"Scheduling","l":"sortByDiff(Scheduling.Job[])","url":"sortByDiff(my.algorithms.Scheduling.Job[])"},{"p":"my.algorithms","c":"Scheduling","l":"sortByRatio(Scheduling.Job[])","url":"sortByRatio(my.algorithms.Scheduling.Job[])"},{"p":"my.data_structures","c":"Trie","l":"startsWith(String)","url":"startsWith(java.lang.String)"},{"p":"my.data_structures","c":"Matrix","l":"strToMat(String)","url":"strToMat(java.lang.String)"},{"p":"my.data_structures","c":"MedianMaintainer","l":"toArray()"},{"p":"my.algorithms","c":"TopologicalSort","l":"TopologicalSort()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"BinaryTree.TreeNode","l":"toString()"},{"p":"my.data_structures","c":"Graph","l":"toString()"},{"p":"my.data_structures","c":"Graph.Edge","l":"toString()"},{"p":"my.data_structures","c":"MedianMaintainer","l":"toString()"},{"p":"my.data_structures","c":"MinStack","l":"toString()"},{"p":"my.data_structures","c":"Min_Heap","l":"toString()"},{"p":"my.data_structures","c":"Pair","l":"toString()"},{"p":"my.data_structures","c":"UnionFind","l":"toString()"},{"p":"my.data_structures","c":"UnionFind.Edge","l":"toString()"},{"p":"my.data_structures","c":"UnionFind.Node","l":"toString()"},{"p":"my.data_structures","c":"BinaryTree","l":"toString(BinaryTree.TreeNode)","url":"toString(my.data_structures.BinaryTree.TreeNode)"},{"p":"my.data_structures","c":"Matrix","l":"toString(int[][])"},{"p":"my.algorithms","c":"MinimumSpanningTree","l":"totalCost(ArrayList<Graph.Edge>)","url":"totalCost(java.util.ArrayList)"},{"p":"my.data_structures","c":"BinaryTree.TreeNode","l":"TreeNode(int)","url":"%3Cinit%3E(int)"},{"p":"my.data_structures","c":"Trie","l":"Trie()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"Trie.TrieNode","l":"TrieNode()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"TwoSum","l":"TwoSum()","url":"%3Cinit%3E()"},{"p":"my.algorithms","c":"TwoSum","l":"twoSum(long[], long)","url":"twoSum(long[],long)"},{"p":"my.algorithms","c":"TwoSum","l":"twoSumDistinct(long[], long)","url":"twoSumDistinct(long[],long)"},{"p":"my.algorithms","c":"TwoSum","l":"twoSumUnique(long[], long)","url":"twoSumUnique(long[],long)"},{"p":"my.data_structures","c":"UnionFind","l":"union(UnionFind.Edge<E>)","url":"union(my.data_structures.UnionFind.Edge)"},{"p":"my.data_structures","c":"UnionFind","l":"UnionFind()","url":"%3Cinit%3E()"},{"p":"my.data_structures","c":"UnionFind","l":"UnionFind(Collection<? extends E>)","url":"%3Cinit%3E(java.util.Collection)"},{"p":"my.data_structures","c":"BinaryTree.TreeNode","l":"val"},{"p":"my.algorithms","c":"Scheduling","l":"weightedCompletionTime(Scheduling.Job[])","url":"weightedCompletionTime(my.algorithms.Scheduling.Job[])"},{"p":"my.data_structures","c":"Matrix","l":"zeros(int, int)","url":"zeros(int,int)"}]